#!/usr/bin/env bash

# common k8s/ocp cluster operations
# requires:
# - fzf: https://github.com/junegunn/fzf

set -e
[ -n "$TRACE" ] && set -x

# openshift-install from CI
ocp_releases_url="https://amd64.ocp.releases.ci.openshift.org"
ocp_release_artifacts_url="https://openshift-release-artifacts.apps.ci.l2s4.p1.openshiftapps.com/"

# openshift-install from public stream
ocp_releases_pub_url="https://mirror.openshift.com/pub/openshift-v4/x86_64/clients/ocp"
ocp_release_pub_artifacts_url="https://mirror.openshift.com/pub/openshift-v4/x86_64/clients/ocp"

openshift_installer=
ocp_version=

# cluster
cluster_name=
[ -d "$OCP_CLUSTER_CONFIG_DIR/$cluster_name" ] && cluster_name="${cluster_name}-$(date '+%H%M')"

usage () {
  cat <<EOF
Manipulate openshift clusters.

COMMANDS
    create [-n|--name <string>] [-v|--ocp-version <string>] [-i|--interactive-config] [-l|--list-versions] [--img-override] [--pub]
        Create a new cluster on AWS using openshift-install.

    destroy [-v|--ocp-version <string>]
        Select and destroy an existing cluster using openshift-install.

    config [-d|--delete]
        Choose a cluster configuration and export it to KUBECONFIG.

        -d,--delete
          Delete existing cluster configurations.

    clean [-i|--installers] [-t|--templates]
        Delete installers and/or templates. If -i/-it are not provided, this command will
        delete all installers and templates.

        -i,--installers
            Delete installers only.

        -t,--templates
            Delete templates only.

    installer [-v|--ocp-version <string>] [--pub]
        Download the openshift-install binary.
        Releases: $ocp_releases_url

        -v,--ocp-version <string>
          Specify the version to install (required).

        --pub
          Use the public mirror instead of the CI which is the default.

    -h, --help, help, usage
        Print this usage message.
EOF
}

# verify aws login and show confirmation prompt
aws_login () {
  echo
  echo "Checking AWS login info"
  aws iam get-user
  echo
}

# sign-in to 1password and store session
op_signin() {
  local op_session_file="$HOME/.config/op/.session-token"
  OP_SESSION=$(cat $op_session_file 2>/dev/null)
  op --session "$OP_SESSION" user list > /dev/null 2>&1 && return

  OP_SESSION=$(op signin --account my --raw)
  chmod 600 "$op_session_file"
  echo -n "$OP_SESSION" > "$op_session_file"
}

# takes ~45min
create_openshift_cluster () {
  local interactive_config="$1"
  local release_image_override="$2"
  local platform="aws"
  local template_file="${OCP_CLUSTER_CONFIG_TEMPLATES_DIR}/install-config_${platform}_v${ocp_version}.yaml"

  if [ -n "$interactive_config" ]; then
    echo -e "Will create interactive install configuration\n"
    $openshift_installer --dir="$OCP_CLUSTER_CONFIG_DIR/tmp-interactive" create install-config

    cluster_name=$(grep -A2 metadata "$OCP_CLUSTER_CONFIG_DIR/tmp-interactive/install-config.yaml" | grep name | cut -d' ' -f4)
    mv $OCP_CLUSTER_CONFIG_DIR/tmp-interactive $OCP_CLUSTER_CONFIG_DIR/$cluster_name
    echo "moved temp dir '$OCP_CLUSTER_CONFIG_DIR/tmp-interactive' to '$OCP_CLUSTER_CONFIG_DIR/$cluster_name'"
    cluster_path="$OCP_CLUSTER_CONFIG_DIR/$cluster_name"

    create_cluster_config_template "$template_file" "$cluster_path/install-config.yaml" "$cluster_name"

  elif [ -f "$template_file" ]; then
    echo -e "Will use template:\n  $template_file\n"
    local pull_secret=
    if command -v op &> /dev/null; then
      op_signin
      pull_secret=$(op --session "$OP_SESSION" read "$OP_ITEM_OCP_PULL_SECRET")
    else
      echo -n "Pull secret:"
      read -s pull_secret
    fi

    cluster_path="$OCP_CLUSTER_CONFIG_DIR/$cluster_name"
    mkdir -p "$cluster_path"

    local config_file="$cluster_path/install-config.yaml"
    cp "$template_file" "$config_file"
    sed -i "s/name: \$CLUSTER_NAME$/name: $cluster_name/" "$config_file"
    sed -i "s/pullSecret: \$PULL_SECRET$/pullSecret: '$pull_secret'/" "$config_file"

  else
    echo "Error: no template found for $platform/$ocp_version; run script interactively to create one"
    exit 1
  fi

  echo -e "\nCluster to be created"
  echo -e "* Cluster name:\t$cluster_name"
  echo -e "* OCP Version:\t$ocp_version"
  echo -e "* Installer:\t$openshift_installer"
  echo -e "* Config dir:\t$cluster_path"
  echo -e "* Image override:\t$release_image_override\n"
  read -p "Proceed? [yN] " yn
  case $yn in
    y|yes) ;;
    *) echo "Aborting cluster creation" && exit 1;;
  esac

  # create cluster
  echo "Will create cluster '$cluster_path'"
  SSH_AUTH_SOCK= OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE=$release_image_override $openshift_installer --dir="$cluster_path" create cluster
  echo "Cluster metadata stored in '$cluster_path'"

  # create 1p entry with console credentials
  echo "Will update 1p entry '$OP_ENTRY_OCP_CONSOLE' with URL and password"
  op_signin
  kubeadmin_password=$(cat "$cluster_path/auth/kubeadmin-password")
  web_console_url=$(grep -o "https://console-openshift-console.*.openshift.com" "$cluster_path/.openshift_install.log")
  op --session "$OP_SESSION" item edit "$OP_ITEM_OCP_CONSOLE" --vault "$OP_VAULT_OCP" password="$kubeadmin_password" > /dev/null
  op --session "$OP_SESSION" item edit "$OP_ITEM_OCP_CONSOLE" --vault "$OP_VAULT_OCP" website="$web_console_url" > /dev/null
  op --session "$OP_SESSION" item edit "$OP_ITEM_OCP_CONSOLE" --vault "$OP_VAULT_OCP" cluster="$cluster_name" > /dev/null

  # use this kubeconfig
  cluster_conf="${OCP_CLUSTER_CONFIG_DIR}/${cluster_name}/auth/kubeconfig"
  export KUBECONFIG="$cluster_conf"
  echo "export KUBECONFIG=$cluster_conf" > ~/.zsh/conf.d/ocp-cluster.zsh
  oc status
}

# existing cluster configs
load_cluster_configs () {
  all_configs=()

  # clusterbot configs
  clusterbot_configs_dir="$HOME/Downloads"
  clusterbot_config_regex=".*kubeconfig.*"
  configs=( $(find "$clusterbot_configs_dir" -regex "$clusterbot_config_regex" 2>/dev/null) )
  for c in "${configs[@]}"; do
    [[ -z "${c// }" ]] || all_configs+=($c)
  done

  # openshift-install configs
  configs=( $(find "$OCP_CLUSTER_CONFIG_DIR" -maxdepth 1 -regex "$OCP_CLUSTER_CONFIG_REGEX" 2>/dev/null) )
  for c in "${configs[@]}"; do
    [[ -z "${c// }" ]] || all_configs+=($c)
  done

  if [[ "${#all_configs[@]}" -eq "0" ]]; then
    echo "No configs found in the following dirs:"
    echo "    $clusterbot_configs_dir"
    echo "    $OCP_CLUSTER_CONFIG_DIR"
    exit
  fi
}

# commands
cmd_installer () {
  local ocp_version_label=
  local ocp_pub=
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -v|--version)
        ocp_version_label="$2"
        shift
        shift
        ;;
      --pub)
        ocp_pub=1
        shift
        ;;
      *)
        echo "Error: unknown argument '$1' for command 'installer'"
        usage
        exit 1
        ;;
    esac
  done
  [ -z "$ocp_version_label" ] && { echo "Error: no version specified. Check '$(basename $0) --help'."; exit 1;}

  local ocp_url=
  local ocp_installer_dir=
  if [ -n "$ocp_pub" ]; then
    # install from public releases
    ocp_url="$ocp_release_pub_artifacts_url/$ocp_version_label"
    ocp_installer_dir="$OCP_INSTALLER_DIR/pub"

  else
    # install from CI releases
    ocp_url="$ocp_release_artifacts_url/$ocp_version_label"
    ocp_installer_dir="$OCP_INSTALLER_DIR/ci"
  fi

  ocp_version=$(curl -s "$ocp_url/release.txt")
  while [[ "$ocp_version" != *"Name:"*"$ocp_version_label"* ]]; do
    echo "Version '$ocp_version_label' not found in '$ocp_url/release.txt'"
    echo "Please check available releases in $ocp_releases_url"
    read -p "Version? ['q' aborts] " ocp_version_label
    [ "$ocp_version_label" == "q" ] && { echo "Abort."; exit 1; }

    ocp_url="$ocp_release_artifacts_url/$ocp_version_label"
    ocp_version=$(curl -s "$ocp_url/release.txt")
  done
  ocp_version=$(echo "$ocp_version" | grep "^Name:" | tr -s ' ' | cut -d' ' -f2)

  openshift_installer="${ocp_installer_dir}/openshift-install-${ocp_version}"
  if [ -f "$openshift_installer" ]; then
    echo "OpenShift installer found; will not download"
    echo "Location: $openshift_installer"
    $openshift_installer version
    return
  fi

  echo "Downloading installer: ${ocp_url}/openshift-install-linux-${ocp_version}.tar.gz"
  curl "${ocp_url}/openshift-install-linux-${ocp_version}.tar.gz" --output $ocp_installer_dir/openshift-install.tar.gz
  tar -xzf $ocp_installer_dir/openshift-install.tar.gz -C $ocp_installer_dir "openshift-install" --transform "s/openshift-install/openshift-install-$ocp_version/"
  rm $ocp_installer_dir/openshift-install.tar.gz
}

cmd_create () {
  local arg_name=
  local arg_version=
  local arg_interactive_config=
  local arg_pub=
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -n|--name)
        arg_name="$2"
        shift
        shift
        ;;
      -v|--ocp-version)
        arg_version="-v $2"
        shift
        shift
        ;;
      -i|--interactive-config)
        arg_interactive_config=1
        shift
        ;;
      -l|--list-versions)
        echo "INSTALLERS:"
        find $OCP_INSTALLER_DIR -type f -name "openshift-install-*"
        echo

        echo "TEMPLATES:"
        find $OCP_CLUSTER_CONFIG_TEMPLATES_DIR -type f

        echo -e "\nFor more versions, see $ocp_releases_url"
        exit 0
        ;;
      --img-override)
        arg_release_image_override="$2"
        shift
        shift
        ;;
      --pub)
        arg_pub="--pub"
        shift
        ;;
      *)
        echo "Error: unknown argument '$1' for command 'create'"
        usage
        exit 1
        ;;
    esac
  done

  cmd_installer $arg_version $arg_pub

  cluster_name="${RH_USERNAME}-v${ocp_version}-$(date '+%Y%m%d')"
  [ -d "$OCP_CLUSTER_CONFIG_DIR/$cluster_name" ] && cluster_name="${cluster_name}-$(date '+%H%M')"

  if [ -n "$arg_name" ]; then
    [[ ${arg_name:0:1} == "-" ]] && cluster_name="${cluster_name}$arg_name" || cluster_name="$arg_name"
  fi

  if [ -d "$OCP_CLUSTER_CONFIG_DIR/$cluster_name" ]; then
    echo "Cannot use name '$cluster_name' for cluster; dir already exists"
    exit 1
  fi

  aws_login && create_openshift_cluster "$arg_interactive_config" "$arg_release_image_override"
}

cmd_destroy () {
  local arg_version=
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -v|--ocp-version)
        arg_version="-v $2"
        shift
        shift
        ;;
      *)
        echo "Error: unknown argument '$1' for command 'destroy'"
        usage
        exit 1
        ;;
    esac
  done

  cmd_installer $arg_version

  read -p "Will destroy cluster '$KUBECONFIG'; ok? [yN] " yn
  # FIXME: I don't need the kubeconfig, just the cluster dir; fix to be able to destroy incomplete clusters
  case $yn in
    y|yes) $openshift_installer destroy cluster --dir ${KUBECONFIG%"/auth/kubeconfig"};;
    *) echo "Aborting" && exit 1;;
  esac
}

cmd_config () {
  load_cluster_configs

  local arg="$1"
  case "$arg" in
    -d|--delete)
      # delete config files instead of choosing one
      echo "Cluster config to remove:"
      selected=$(printf "%s\n" "${all_configs[@]}" | fzf --height=~10)
      if [[ "$selected" == "" ]]; then
        echo "No selection, bye"
        exit 1
      fi

      mkdir -p $OCP_CLUSTER_CONFIG_ARCHIVE_DIR
      rm -rf "$OCP_CLUSTER_CONFIG_ARCHIVE_DIR/$(basename $selected)"
      mv "$selected" "$OCP_CLUSTER_CONFIG_ARCHIVE_DIR"
      echo "Config '$selected' moved to '$OCP_CLUSTER_CONFIG_ARCHIVE_DIR'"

      # also delete archived cluster configs older than 14 days
      find $OCP_CLUSTER_CONFIG_ARCHIVE_DIR/* -type d -ctime +14 -exec rm -rf {} \;
      return
      ;;
    "")
      ;;
    *)
      echo "Error: unknown argument '$arg'"
      usage
      exit 1
      ;;
  esac

  echo "Current value:"
  echo "KUBECONFIG=$KUBECONFIG"
  echo
  echo "Choose a cluster config:"
  selected=$(printf "%s\n" "${all_configs[@]}" | fzf --height=~10)
  if [[ "$selected" == "" ]]; then
    echo "No selection, bye"
    exit 1
  fi

  if [[ "$selected" == *"${OCP_CLUSTER_CONFIG_DIRNAME}/${RH_USERNAME}-"* ]]; then
    selected="$selected/auth/kubeconfig"
  fi

  echo -e "$selected\n"
  echo "export KUBECONFIG=$selected" > "$OCP_CLUSTER_KUBECONFIG"
  echo -e "Exported KUBECONFIG; run 'exec zsh' to load it"
}

cmd_clean () {
  local clean_installers=
  local clean_templates=
  local clean_all=1

  while [[ $# -gt 0 ]]; do
    local arg="$1"
    case "$arg" in
      -i|--installers)
        clean_installers=1
        clean_all=
        shift
        ;;
      -t|--templates)
        clean_templates=1
        clean_all=
        shift
        ;;
      *)
        echo "Error: unknown argument '$arg'"
        usage
        exit 1
        ;;
    esac
  done

  echo "Will delete the following:"
  if [ -n "$clean_all" ] || [ -n "$clean_installers" ]; then
    echo -e "\nINSTALLERS:"
    find $OCP_INSTALLER_DIR -type f -name "openshift-install-*"
  fi
  if [ -n "$clean_all" ] || [ -n "$clean_templates" ]; then
    echo -e "\nTEMPLATES:"
    find $OCP_CLUSTER_CONFIG_TEMPLATES_DIR -type f
  fi

  echo
  read -p "Proceed? [yN] " yn
  case $yn in
    y|yes) ;;
    *) echo "Abort." && exit 1;;
  esac

  if [ -n "$clean_all" ] || [ -n "$clean_installers" ]; then
    find $OCP_INSTALLER_DIR -type f -name "openshift-install-*" -exec rm -rf {} \;
  fi

  if [ -n "$clean_all" ] || [ -n "$clean_templates" ]; then
    find $OCP_CLUSTER_CONFIG_TEMPLATES_DIR -type f -exec rm -rf {} \;
  fi
}

# check which clusters from the available configs are still active
cmd_check () {
  load_cluster_configs
  for config in ${all_configs[@]}; do
    if [[ "$config" == *"${OCP_CLUSTER_CONFIG_DIRNAME}/${RH_USERNAME}-"* ]]; then
      config="$config/auth/kubeconfig"
    fi
    echo "checking '$config'"
    KUBECONFIG="$config" oc status 2>&1 >/dev/null && echo "* alive" || echo "* dead"
  done
}

create_cluster_config_template () {
  local template_file="$1"
  local source_file="$2"
  local cluster_name="$3"

  if [ -f "$template_file" ]; then
    echo "matching template already exists:"
    echo "  $template_file"
    return
  fi

  # create new template
  mkdir -p $OCP_CLUSTER_CONFIG_TEMPLATES_DIR
  cp $source_file $template_file
  sed -i "s/name: $cluster_name$/name: \$CLUSTER_NAME/" $template_file
  sed -i "s/pullSecret: .*$/pullSecret: \$PULL_SECRET/" $template_file
  echo "created new template:"
  echo "  $template_file"
}

main () {
  cmd_name="$1"
  shift || true
  case "$cmd_name" in
    create|destroy|config|clean|installer|check)
      cmd_"$cmd_name" "$@"
      ;;
    "")
      cmd_config
      ;;
    -h|--help|help|usage)
      usage
      ;;
    *)
      echo "Error: unknown command '$cmd_name'"
      usage
      exit 1
      ;;
  esac
}

[ -z "$RH_USERNAME" ] && { echo "RH_USERNAME env variable required but is not set"; exit 1; }
[ -z "$OCP_CLUSTER_CONFIG_DIR" ] && { echo "OCP_CLUSTER_CONFIG_DIR env variable required but is not set"; exit 1; }
[ -z "$OCP_CLUSTER_CONFIG_DIRNAME" ] && { echo "OCP_CLUSTER_CONFIG_DIRNAME env variable required but is not set"; exit 1; }
[ -z "$OCP_CLUSTER_CONFIG_TEMPLATES_DIR" ] && { echo "OCP_CLUSTER_CONFIG_TEMPLATES_DIR env variable required but is not set"; exit 1; }
[ -z "$OCP_CLUSTER_CONFIG_ARCHIVE_DIR" ] && { echo "OCP_CLUSTER_CONFIG_ARCHIVE_DIR env variable required but is not set"; exit 1; }
[ -z "$OCP_INSTALLER_DIR" ] && { echo "OCP_INSTALLER_DIR env variable required but is not set"; exit 1; }
[ -z "$OCP_CLUSTER_CONFIG_REGEX" ] && { echo "OCP_CLUSTER_CONFIG_REGEX env variable required but is not set"; exit 1; }
[ -z "$OCP_CLUSTER_KUBECONFIG" ] && { echo "OCP_CLUSTER_KUBECONFIG env variable required but is not set"; exit 1; }
[ -z "$OP_ITEM_OCP_PULL_SECRET" ] && { echo "OP_ITEM_OCP_PULL_SECRET env variable required but is not set"; exit 1; }
[ -z "$OP_ITEM_OCP_CONSOLE" ] && { echo "OP_ITEM_OCP_CONSOLE env variable required but is not set"; exit 1; }
[ -z "$OP_VAULT_OCP" ] && { echo "OP_VAULT_OCP env variable required but is not set"; exit 1; }
[ -z "$OP_ENTRY_OCP_CONSOLE" ] && { echo "OP_ENTRY_OCP_CONSOLE env variable required but is not set"; exit 1; }

main "$@"
