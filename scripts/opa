#!/usr/bin/env bash

# useful 1password wrapper for common commands
# requires:
# - 1password CLI: https://developer.1password.com/docs/cli/get-started/#install
# - gum: https://github.com/charmbracelet/gum

set -e
[ -n "$TRACE" ] && set -x

op_signin () {
  local op_session_file="$HOME/.config/op/.session-token"
  OP_SESSION=$(cat $op_session_file 2>/dev/null)
  op --session "$OP_SESSION" user list > /dev/null 2>&1 && return

  OP_SESSION=$(op signin --account my --raw)
  chmod 600 "$op_session_file"
  echo -n "$OP_SESSION" > "$op_session_file"
}

copy_and_wait () {
  data="$1"

  existing="$(wl-paste)"
  echo -n "$data" | wl-copy
  notify-send "secret copied to clipboard"
  echo "secret copied to clipboard"
  echo "will clear after 15s"

  sleep 15
}

restore () {
  exitcode=$?
  echo -n "$existing" | wl-copy
  notify-send "secret cleared from clipboard"
  echo "secret cleared from clipboard"
  exit $exitcode
}

cmd_tok () {
  echo "will get and copy tok"
  OTP=$(op --session "$OP_SESSION" item get "$OP_TOK_ITEM" --vault "$OP_TOK_VAULT" --otp)
  PIN=$(op --session "$OP_SESSION" item get "$OP_TOK_ITEM" --vault "$OP_TOK_VAULT" --fields "$OP_TOK_FIELD")

  copy_and_wait "${PIN}${OTP}"
}

cmd_gpg () {
  key_alias="$2"
  case "$key_alias" in
    liouk)
      email="$GPG_EMAIL_PRIV"
      ;;
    rh|redhat|"")
      email="$GPG_EMAIL_WORK"
      ;;
    *)
      echo "unknown key alias '$key_alias'"
      exit 1
      ;;
  esac
  item="gpg ${HOST%.local} $email"

  echo "will copy password for gpg key '$item'"
  secret=$(op --session "$OP_SESSION" item get "$item" --field "password")
  secret=${secret#"\""}
  secret=${secret%"\""}
  copy_and_wait "$secret"
}

cmd_list () {
  local selected=$(op --session "$OP_SESSION" item list | tail -n +2 | awk -F '    ' '{print $1"    "$2}' | fzf)
  [ "$selected" = "" ] && { echo "no selection; bye"; exit; }
  local selected_id=$(echo -n "$selected" | cut -d' ' -f1)
  all_field_names=()

  # FIXME:
  # [ERROR] 2023/04/06 15:32:49 "website" isn't a field in the "irinis cluster console" item. This may be because you are trying to access an autofill url, using the `--fields` flag. In order to access urls, you can use `op item get ITEM --format json | jq .urls`
  if ! secret=$(op --session "$OP_SESSION" item get "$selected_id" --fields "type=concealed" --format=json | jq -r '.value' 2>/dev/null); then
    while IFS= read -r field; do
      [ "$field" = "Fields:" ] && continue
      field_name=$(echo $field | cut -d':' -f1)
      [[ -z "${field_name// }" ]] || all_field_names+=("$field_name")
    done <<< $(op --session "$OP_SESSION" item get "$selected_id" | sed -n '/^Fields:$/,$p')

    echo "Select field to copy:"
    selected_field=$(gum choose "${all_field_names[@]}")
    [ "$selected_field" = "" ] && { echo "no selection; bye"; exit; }

    secret=$(op --session "$OP_SESSION" item get "$selected_id" --field "$selected_field")
    secret=${secret#"\""}
    secret=${secret%"\""}
  fi

  copy_and_wait "$secret"
}

cmd_signin () {
  # do nothing; placeholder to just sign in to 1p
  :
}

main () {
  cmd="$1"
  case "$cmd" in
    tok|gpg|list|signin) ;;
    "") cmd="list" ;;
    *) echo "unknown command: '$1'"; exit 1;;
  esac

  op_signin

  trap restore EXIT
  cmd_"$cmd" "$@"
}

[ -z "$OP_TOK_VAULT" ] && { echo "OP_TOK_VAULT env variable required but is not set"; exit 1; }
[ -z "$OP_TOK_ITEM" ] && { echo "OP_TOK_ITEM env variable required but is not set"; exit 1; }
[ -z "$OP_TOK_FIELD" ] && { echo "OP_TOK_FIELD env variable required but is not set"; exit 1; }
[ -z "$GPG_EMAIL_PRIV" ] && { echo "GPG_EMAIL_PRIV env variable required but is not set"; exit 1; }
[ -z "$GPG_EMAIL_WORK" ] && { echo "GPG_EMAIL_WORK env variable required but is not set"; exit 1; }

main "$@"
